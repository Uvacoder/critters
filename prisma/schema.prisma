// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  phone         String
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  posts  Post[] @relation("UserToPosts")
  postId String

  @@map("users")
}

model Post {
  id            String   @id @default(uuid())
  title         String   @unique
  description   String
  date_missing  String?
  date_found    String?
  reward        Boolean?
  reward_amount Int?
  location      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt


  critter   Critter? @relation(fields: [critterId], references: [id])
  user      User?    @relation("UserToPosts", fields: [userId], references: [id])
  userId    String?
  critterId String   @unique
  @@map("posts")
}

model Critter {
  id     String   @id @default(uuid())
  name   String
  images String[]

  post   Post?
  postId String?

  @@map("critters")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("tokens")
}
